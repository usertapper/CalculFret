[HttpPost("calcul")]
    public async Task<ActionResult<decimal>> CalculMontantFret([FromBody] CalculFretRequest request)
    {
        var tarif = await this.GetTarifFret(request.CodeTarif, request.IleDepartId, request.IleArriveeId);
        if(tarif == null) throw new Exception($"Le tarif {request.CodeTarif} est introuvable");

        var t = tarif;

        decimal baseCalcule;
        switch(t.Methode) {
            case "Poids":
                baseCalcule = request.Poids;
                break;
            case "Volume":
                baseCalcule = request.Volume;
                break;
            case "PoidsVolume":
                baseCalcule = Math.Max(request.Poids, request.Volume);
                break;
            case "Quantité":
                baseCalcule = request.Quantite;
                break;
            default:
                throw new NotImplementedException($"Calcul du fret par {t.Methode} non traité");
        }

        var result = Math.Round((t.Montant * baseCalcule), 0);
        return Ok(result < 609 ? 609 : result);
    }
}

public class CalculFretRequest
{
    public string CodeTarif { get; set; }
    public int IleDepartId { get; set; }
    public int IleArriveeId { get; set; }
    public decimal Poids { get; set; }
    public decimal Volume { get; set; }
    public decimal Quantite { get; set; }
}
